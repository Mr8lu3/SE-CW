doctype html
html(lang="en")
  head
    meta(charset='UTF-8')
    meta(name='viewport' content='width=device-width, initial-scale=1.0')
    title Admin Guides Management - Game Sharing Tips & Tricks
    // Add Three.js and Vanta.js scripts
    script(src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r134/three.min.js")
    script(src="https://cdn.jsdelivr.net/npm/vanta@latest/dist/vanta.fog.min.js")
    style.
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        background-color: #010101; /* Black background */
        color: #FEFDFD; /* White text */
        min-height: 100vh; /* Ensure the body takes the full height of the viewport */
        overflow-x: hidden;
      }

      #vanta-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 0;
      }

      /* Header with title */
      .header {
        background-color: rgba(0, 0, 0, 0.5); /* More translucent black background */
        color: #FEFDFD; /* White text */
        padding: 25px 20px; /* Increased top/bottom padding */
        text-align: center;
        position: relative; 
        z-index: 100; /* Ensure the header stays above everything */
        backdrop-filter: blur(5px); /* Apply a blur effect for better text readability */
      }
      
      .header h1 {
        margin: 0;
        font-size: 2.5em;
        margin-bottom: 15px; /* Add space between header text and navbar */
        text-shadow: 0 0 5px rgba(0, 0, 0, 0.5); /* Text shadow for better visibility */
      }
      
      /* Navigation styling with improved visibility and translucency */
      .navbar-container {
        position: relative;
        width: 100%;
        z-index: 100; /* Very high z-index */
      }
      
      .navbar {
        display: flex;
        justify-content: center;
        background-color: rgba(58, 49, 83, 0.6); /* More translucent purple */
        width: 100%;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); /* Shadow for depth */
        border-top: 1px solid rgba(255, 255, 255, 0.1); /* Subtle top border */
        border-bottom: 1px solid rgba(0, 0, 0, 0.2); /* Subtle bottom border */
        backdrop-filter: blur(5px); /* Apply a blur effect for better text readability */
      }
      
      .navbar a {
        color: #FEFDFD;
        padding: 15px 25px; /* Wider padding for easier clicking */
        text-decoration: none;
        font-weight: bold; /* Make text bolder */
        transition: all 0.3s ease;
        font-size: 1.1em; /* Slightly larger font */
        letter-spacing: 0.5px; /* Better readability */
        text-shadow: 0 0 4px rgba(0, 0, 0, 0.7); /* Text shadow for better visibility */
        position: relative; /* For the hover effect */
      }
      
      .navbar a:hover {
        background-color: rgba(95, 67, 178, 0.7); /* Translucent purple for hover effect */
        box-shadow: 0 0 15px rgba(95, 67, 178, 0.5); /* Glow effect on hover */
        transform: translateY(-2px); /* Slight lift effect */
      }
      
      .navbar a:active {
        transform: translateY(1px); /* Press effect */
      }

      /* Admin content */
      .admin-container {
        width: 90%;
        margin: 40px auto 80px;
        padding: 30px;
        background-color: rgba(34, 34, 34, 0.7);
        border-radius: 10px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.4);
        border: 1px solid rgba(95, 67, 178, 0.2);
        position: relative;
        z-index: 10;
        backdrop-filter: blur(5px);
      }

      .admin-container h2 {
        color: #8C6EFF;
        font-size: 28px;
        margin-top: 0;
        margin-bottom: 20px;
        text-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
      }

      /* Guide management */
      .create-guide-form {
        background-color: rgba(58, 49, 83, 0.4);
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 30px;
        border: 1px solid rgba(95, 67, 178, 0.3);
      }

      .form-group {
        margin-bottom: 15px;
      }

      .form-group label {
        display: block;
        margin-bottom: 5px;
        color: #8C6EFF;
        font-weight: bold;
      }

      .form-group input, .form-group textarea, .form-group select {
        width: 100%;
        padding: 12px;
        background-color: rgba(51, 51, 51, 0.7);
        border: 1px solid rgba(95, 67, 178, 0.3);
        border-radius: 5px;
        color: #fff;
        font-size: 16px;
        box-sizing: border-box;
      }

      .form-group textarea {
        height: 200px;
        resize: vertical;
      }
      
      .form-group select {
        cursor: pointer;
      }

      /* Guide cards */
      .guides-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 30px;
      }

      .guide-card {
        background-color: rgba(51, 51, 51, 0.7);
        border-radius: 10px;
        overflow: hidden;
        border: 1px solid rgba(95, 67, 178, 0.2);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
      }

      .guide-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.4);
        border-color: rgba(107, 71, 184, 0.4);
      }

      .guide-header {
        background-color: rgba(58, 49, 83, 0.7);
        padding: 15px;
        border-bottom: 1px solid rgba(95, 67, 178, 0.3);
      }

      .guide-header h3 {
        margin: 0;
        color: #8C6EFF;
        font-size: 18px;
      }
      
      .guide-category {
        background-color: rgba(107, 71, 184, 0.7);
        color: white;
        padding: 3px 8px;
        border-radius: 15px;
        font-size: 0.85em;
        display: inline-block;
        margin-top: 5px;
      }
      
      .guide-content {
        padding: 15px;
      }
      
      .guide-content p {
        margin: 0;
        color: #DCDCDC;
        height: 60px;
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
      }
      
      .guide-date {
        color: #b3b3b3;
        font-size: 0.85em;
        margin-top: 10px;
      }
      
      .guide-actions {
        padding: 15px;
        border-top: 1px solid rgba(95, 67, 178, 0.2);
        display: flex;
        justify-content: space-between;
      }

      /* Action buttons */
      .action-button {
        display: inline-block;
        padding: 8px 12px;
        margin-right: 5px;
        background-color: #5F43B2;
        color: #FEFDFD;
        border: none;
        border-radius: 5px;
        font-size: 14px;
        font-weight: bold;
        text-decoration: none;
        transition: all 0.3s ease;
        cursor: pointer;
      }

      .action-button:hover {
        background-color: #7555D4;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
      }

      .action-button:active {
        transform: translateY(1px);
      }

      .delete-button {
        background-color: #d43655;
      }

      .delete-button:hover {
        background-color: #ff3b5d;
      }

      .edit-button {
        background-color: #43b28c;
      }

      .edit-button:hover {
        background-color: #55d4aa;
      }

      .submit-button {
        background-color: #43b28c;
        padding: 12px 25px;
        font-size: 16px;
      }

      .submit-button:hover {
        background-color: #55d4aa;
      }

      .back-button {
        display: inline-block;
        padding: 12px 20px;
        background-color: #3A3153;
        color: #FEFDFD;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        font-weight: bold;
        text-decoration: none;
        transition: all 0.3s ease;
        cursor: pointer;
        margin-top: 30px;
      }

      .back-button:hover {
        background-color: #4A415F;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
      }

      /* Message display */
      .message {
        padding: 15px;
        margin: 20px 0;
        border-radius: 5px;
        text-align: center;
        font-weight: bold;
      }
      
      .success {
        background-color: rgba(76, 175, 80, 0.2);
        color: #4CAF50;
        border: 1px solid rgba(76, 175, 80, 0.3);
      }
      
      .error {
        background-color: rgba(255, 107, 107, 0.2);
        color: #ff6b6b;
        border: 1px solid rgba(255, 107, 107, 0.3);
      }

      /* Modal */
      .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.7);
        backdrop-filter: blur(3px);
      }

      .modal-content {
        background-color: rgba(51, 51, 51, 0.95);
        margin: 5% auto;
        padding: 25px;
        border: 1px solid rgba(95, 67, 178, 0.5);
        border-radius: 10px;
        width: 70%;
        max-width: 800px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);
      }
      
      .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        border-bottom: 1px solid rgba(95, 67, 178, 0.3);
        padding-bottom: 15px;
      }
      
      .modal-header h3 {
        margin: 0;
        color: #8C6EFF;
        font-size: 24px;
      }
      
      .close {
        color: #FEFDFD;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
      }

      .close:hover,
      .close:focus {
        color: #8C6EFF;
        text-decoration: none;
      }

      .footer {
        text-align: center;
        background-color: rgba(0, 0, 0, 0.5); /* More translucent footer */
        color: #FEFDFD;
        padding: 10px 0;
        position: fixed;
        width: 100%;
        bottom: 0;
        z-index: 10; /* Ensure the footer stays above the background */
        backdrop-filter: blur(5px); /* Apply a blur effect for better text readability */
      }

  body.dark-theme
    // Vanta background div
    #vanta-background

    // Header Section with navbar included
    .header
      h1 Admin Guides Management
      .navbar-container
        .navbar
          a(href='/') Home
          a(href='/Forum') Forum
          a(href='/userpage') User
          a(href='/Details_page') About Us
          a(href='/Guides') Guides
          a(href='/admin') Admin
          a(href='/logout') Logout

    // Admin Guides Management Container
    .admin-container
      h2 Manage Guides
      #message-container
      
      .create-guide-form
        h3 Create New Guide
        form#newGuideForm
          .form-group
            label(for='title') Guide Title:
            input#title(type='text' name='title' required)
          .form-group
            label(for='category') Category:
            select#category(name='category' required)
              option(value='') -- Select Category --
              option(value='fps') FPS Games
              option(value='rpg') RPG Games
              option(value='mods') Mods
              option(value='strategy') Strategy
              option(value='mmo') MMO Games
          .form-group
            label(for='content') Guide Content:
            textarea#content(name='content' required)
          .form-group
            button.action-button.submit-button(type='submit') Create Guide
      
      h3 Existing Guides
      
      .guides-container
        each guide in guides
          .guide-card
            .guide-header
              h3= guide.title
              span.guide-category= guide.category
            .guide-content
              p= guide.content
              .guide-date Published: #{guide.publishDate}
            .guide-actions
              button.action-button.edit-button(onclick=`editGuide(${guide.id})`) Edit
              button.action-button.delete-button(onclick=`deleteGuide(${guide.id})`) Delete

      a.back-button(href='/admin') Back to Dashboard
    
    // Edit Guide Modal
    #editGuideModal.modal
      .modal-content
        .modal-header
          h3 Edit Guide
          span.close &times;
        form#editGuideForm
          input#editGuideId(type='hidden' name='guideId')
          .form-group
            label(for='editTitle') Guide Title:
            input#editTitle(type='text' name='title' required)
          .form-group
            label(for='editCategory') Category:
            select#editCategory(name='category' required)
              option(value='') -- Select Category --
              option(value='fps') FPS Games
              option(value='rpg') RPG Games
              option(value='mods') Mods
              option(value='strategy') Strategy
              option(value='mmo') MMO Games
          .form-group
            label(for='editContent') Guide Content:
            textarea#editContent(name='content' required)
          .form-group
            button.action-button.submit-button(type='submit') Update Guide

    // Footer
    .footer
      p &copy; 2025 Game Sharing Tips & Tricks. All rights reserved.

    // Initialize Vanta FOG effect and JavaScript functionality
    script.
      // Initialize Vanta fog effect
      VANTA.FOG({
        el: "#vanta-background",
        mouseControls: true,
        touchControls: true,
        gyroControls: false,
        minHeight: 200.00,
        minWidth: 200.00,
        highlightColor: 0x5F43B2,
        midtoneColor: 0x3A3153,
        lowlightColor: 0x010101,
        baseColor: 0x010101,
        blurFactor: 0.60,
        speed: 1.50,
        zoom: 0.80
      });
      
      // Get modal and buttons
      const modal = document.getElementById('editGuideModal');
      const closeBtn = document.getElementsByClassName('close')[0];
      
      // Close modal when clicking the x button
      closeBtn.onclick = function() {
        modal.style.display = "none";
      }
      
      // Close modal when clicking outside of it
      window.onclick = function(event) {
        if (event.target == modal) {
          modal.style.display = "none";
        }
      }
      
      // Function to show messages
      function showMessage(message, type = 'success') {
        const messageContainer = document.getElementById('message-container');
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}`;
        messageDiv.textContent = message;
        messageContainer.innerHTML = '';
        messageContainer.appendChild(messageDiv);
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
          messageDiv.remove();
        }, 5000);
      }
      
      // Create new guide form submission
      document.getElementById('newGuideForm').addEventListener('submit', function(event) {
        event.preventDefault();
        
        const title = document.getElementById('title').value;
        const category = document.getElementById('category').value;
        const content = document.getElementById('content').value;
        
        fetch('/admin/guides/create', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ title, category, content })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showMessage(data.message, 'success');
            // Clear form
            document.getElementById('title').value = '';
            document.getElementById('category').value = '';
            document.getElementById('content').value = '';
            // Reload page after a delay to show the new guide
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            showMessage(data.message, 'error');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showMessage('An error occurred while creating the guide.', 'error');
        });
      });
      
      // Edit guide form submission
      document.getElementById('editGuideForm').addEventListener('submit', function(event) {
        event.preventDefault();
        
        const guideId = document.getElementById('editGuideId').value;
        const title = document.getElementById('editTitle').value;
        const category = document.getElementById('editCategory').value;
        const content = document.getElementById('editContent').value;
        
        fetch('/admin/guides/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ guideId, title, category, content })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showMessage(data.message, 'success');
            modal.style.display = "none";
            // Reload page after a delay to show the updated guide
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            showMessage(data.message, 'error');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showMessage('An error occurred while updating the guide.', 'error');
        });
      });
      
      // Function to open the edit modal with guide data
      function editGuide(guideId) {
        // Find the guide data from the page
        const guideCard = document.querySelector(`.guide-card .action-button[onclick*="${guideId}"]`).closest('.guide-card');
        const title = guideCard.querySelector('.guide-header h3').textContent;
        const category = guideCard.querySelector('.guide-category').textContent;
        const content = guideCard.querySelector('.guide-content p').textContent;
        
        // Populate the form
        document.getElementById('editGuideId').value = guideId;
        document.getElementById('editTitle').value = title;
        document.getElementById('editCategory').value = category;
        document.getElementById('editContent').value = content;
        
        // Show the modal
        modal.style.display = "block";
      }
      
      // Delete guide
      function deleteGuide(guideId) {
        if (!confirm('Are you sure you want to delete this guide? This action cannot be undone.')) {
          return;
        }
        
        fetch('/admin/guides/delete', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ guideId })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showMessage(data.message, 'success');
            // Remove the guide card
            const guideCard = document.querySelector(`.guide-card .action-button[onclick*="${guideId}"]`).closest('.guide-card');
            guideCard.remove();
          } else {
            showMessage(data.message, 'error');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showMessage('An error occurred while deleting the guide.', 'error');
        });
      };